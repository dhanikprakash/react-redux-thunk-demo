{"version":3,"sources":["components/search/searchStyles.js","components/search/SearchQuery.js","redux/actions/searchQueryActions.js","redux/actions/actionTypes.js","api/apiUtils.js","api/searchApi.js","redux/actions/searchResultActions.js","components/search/SearchResult.js","components/search/SearchPage.js","components/App.js","serviceWorker.js","redux/reducers/initialState.js","redux/reducers/index.js","redux/reducers/searchQueryReducer.js","redux/reducers/searchResultReducer.js","index.js","redux/reducers/configureStore.js"],"names":["useStyles","makeStyles","root","minWidth","margin","textAlign","title","fontSize","marginBottom","pos","SearchQuery","useState","raised","setRaised","classes","searhText","setSearchText","dispatch","useDispatch","toggleRaised","Card","className","onMouseOver","onMouseOut","CardContent","Typography","variant","component","color","gutterBottom","onSubmit","event","preventDefault","console","log","value","type","searchKey","replace","noValidate","autoComplete","TextField","id","inputRef","input","label","Button","handleError","error","getResults","offset","limit","fetch","then","response","json","catch","loadResultSuccess","results","SearchResult","defaultState","hasMore","offSet","items","setOffSet","useSelector","state","result","setResult","useEffect","a","searchApi","loadResults","resultCount","length","concat","toast","warn","position","autoClose","hideProgressBar","closeOnClick","style","height","overflow","dataLength","next","scrollableTarget","List","map","item","key","shortid","generate","ListItem","ListItemAvatar","Avatar","src","artworkUrl100","ListItemText","primary","artistName","secondary","trackName","collectionName","Divider","SearchPage","App","exact","path","Boolean","window","location","hostname","match","rootReducer","combineReducers","initialState","action","store","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","createStore","applyMiddleware","thunk","reduxImmutableStateInvariant","configureStore","ReactDOM","render","CssBaseline","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.7e1d6d1b.chunk.js","sourcesContent":["import { makeStyles } from \"@material-ui/core/styles\";\n\nexport const useStyles = makeStyles({\n  root: {\n    minWidth: 275,\n    margin: \"30px 30px 0px 30px\",\n    textAlign: \"center\",\n  },\n  title: {\n    fontSize: 14,\n    marginBottom: 20,\n  },\n  pos: {\n    marginBottom: 20,\n  },\n});\n","import React, { useState} from \"react\";\nimport Card from \"@material-ui/core/Card\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport Button from \"@material-ui/core/Button\";\nimport Typography from \"@material-ui/core/Typography\";\nimport TextField from \"@material-ui/core/TextField\";\nimport { useDispatch } from 'react-redux'\nimport {searchQueryActions} from \"../../redux/actions/searchQueryActions\";\nimport {useStyles} from \"./searchStyles\";\n\n\n\nexport default function SearchQuery() {\n    const [raised, setRaised] = useState(false);\n    const classes = useStyles();\n    const [searhText, setSearchText] = useState('');\n    const dispatch = useDispatch();\n    const  toggleRaised = () => setRaised(!raised);\n\n    \n  const handleSubmit = (event) => {\n    event.preventDefault();\n    console.log(\"Dispatch Search Query: \" + searhText.value);\n    dispatch(searchQueryActions(searhText.value.replace(/ /g,\"+\")))\n  };\n\n  return (\n    <>\n      <Card\n        className={classes.root}\n        onMouseOver={toggleRaised}\n        onMouseOut={toggleRaised}\n        raised={raised}\n      >\n        <CardContent>\n          <Typography variant=\"h5\" component=\"h2\">\n            Next Front-End Search - Apple API\n          </Typography>\n          <Typography\n            className={classes.title}\n            color=\"textSecondary\"\n            gutterBottom\n          >\n            React/Redux/Thunk/Node/Styled component/FP/Jest/Material UI\n          </Typography>\n\n          <form onSubmit={handleSubmit} noValidate autoComplete=\"off\">\n            <TextField\n              id=\"standard-basic\"\n              inputRef={(input) => (setSearchText(input))}\n              label=\"Artist/Album/Song\"\n            />\n            <Button variant=\"contained\" color=\"primary\" type=\"submit\">\n              Search\n            </Button>\n          </form>\n        </CardContent>\n      </Card>\n    </>\n  );\n}\n","import * as types from \"./actionTypes\";\n\nexport function searchQueryActions(searchKey) {\n  return { type: types.CREATE_SEARCH, searchKey: searchKey };\n}","export const CREATE_SEARCH = \"CREATE_SEARCH\";\nexport const LOAD_RESULT_SUCCESS= \"LOAD_RESULT_SUCCESS\";","export async function handleResponse(response) {\n    if (response.ok) return response.json();\n    if (response.status === 400) {\n        const error = await response.text();\n      throw new Error(error);\n    }\n     console.log(\"Network response was not ok.\");\n     throw new Error(\"Network response was not ok.\");\n  }\n  \n  // In a real app, call an error logging service.\n  export function handleError(error) {\n    console.log(\"API call failed. \" + error);\n    throw error;\n  }\n  ","import { handleResponse, handleError } from \"./apiUtils\";\n\n\nexport function getResults(offset, limit, searchKey) {\n    return fetch(`https://itunes.apple.com/search?media=music&offset=${offset}&limit=${limit}&term=${searchKey}`)\n      .then(response =>  response.json())\n      .catch(handleError);\n  }","import * as types from \"./actionTypes\";\nimport * as searchApi from \"../../api/searchApi\";\n\nexport function loadResultSuccess(results) {\n  return { type: types.LOAD_RESULT_SUCCESS, results };\n}\n\nexport function loadResults(offSet, limit, searchKey) {\n  return async function (dispatch) {\n    try {\n      const results = await searchApi.getResults(offSet, limit, searchKey);\n      dispatch(loadResultSuccess(results));\n    } catch (error) {\n      // In real app, dispatch error handlers.\n      console.log(\"Api call error\");\n    }\n  };\n}\n","import React, { useState, useEffect } from \"react\";\nimport Card from \"@material-ui/core/Card\";\nimport InfiniteScroll from \"react-infinite-scroll-component\";\nimport shortid from \"shortid\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport List from \"@material-ui/core/List\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport ListItemText from \"@material-ui/core/ListItemText\";\nimport ListItemAvatar from \"@material-ui/core/ListItemAvatar\";\nimport Avatar from \"@material-ui/core/Avatar\";\nimport Divider from \"@material-ui/core/Divider\";\nimport { toast } from \"react-toastify\";\nimport { useStyles } from \"./searchStyles\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { loadResults } from \"../../redux/actions/searchResultActions\";\n\nexport default function SearchResult() {\n  const defaultState = {\n    limit: 10,\n    hasMore: false,\n    offSet: 0,\n    searchKey: \"\",\n    items: [],\n  };\n  const [offSet, setOffSet] = useState(0);\n  const classes = useStyles();\n  const searchKey = useSelector((state) => state.searchKey);\n  const results = useSelector((state) => state.results);\n  const [result, setResult] = useState(defaultState);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    if (searchKey !== null && searchKey !== result.searchKey) {\n      //reset when searchKey changes\n      setResult(defaultState);\n    }\n    dispatch(loadResults(result.offSet, result.limit, searchKey));\n  }, [searchKey, offSet]);\n\n  useEffect(() => {\n    if (results != null && results.resultCount >= 0) {\n      setResult({\n        ...result,\n        hasMore: results.results.length > 0,\n        offSet: result.offSet + results.results.length,\n        searchKey: searchKey,\n        items: result.items.concat(results.results),\n      });\n\n      if (\n        results.results.length === 0 &&\n        result.offSet === 0 &&\n        searchKey != null &&\n        searchKey !== \"\"\n      ) {\n        toast.warn(\" No Matching Results\", {\n          position: \"top-right\",\n          autoClose: 3000,\n          hideProgressBar: true,\n          closeOnClick: true,\n        });\n        setResult(defaultState);\n      }\n    }\n    console.log(results);\n  }, [results]);\n\n  const loadMore = () => {\n    setOffSet(result.offSet);\n  };\n\n  return (\n    <>\n      <Card className={classes.root} raised={true}>\n        <CardContent>\n          <div id=\"scrollableDiv\" style={{ height: 600, overflow: \"auto\" }}>\n            <InfiniteScroll\n              dataLength={result.items.length}\n              next={loadMore}\n              hasMore={result.hasMore}\n              scrollableTarget=\"scrollableDiv\"\n            >\n              <List>\n                {result.items.map((item) => (\n                  <div key={shortid.generate()}>\n                    <ListItem>\n                      <ListItemAvatar>\n                        <Avatar src={item.artworkUrl100}></Avatar>\n                      </ListItemAvatar>\n                      <ListItemText\n                        primary={item.artistName}\n                        secondary={item.trackName + \" - \" + item.collectionName}\n                      ></ListItemText>\n                    </ListItem>\n                    <Divider variant=\"inset\" component=\"li\" />\n                  </div>\n                ))}\n              </List>\n            </InfiniteScroll>\n          </div>\n        </CardContent>\n      </Card>\n    </>\n  );\n}\n","import React from 'react';\nimport SearchQuery from './SearchQuery';\nimport SearchResult from './SearchResult';\n\nexport default function SearchPage() {\n    return (\n        <>\n        <SearchQuery></SearchQuery>\n        <SearchResult></SearchResult>\n      </>\n    )\n}\n","import React from \"react\";\nimport { Route, Switch } from \"react-router-dom\";\nimport SearchPage from \"./search/SearchPage\";\nimport { ToastContainer } from \"react-toastify\";\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <>\n      <Switch>\n        <Route exact path=\"/\" component={SearchPage} />\n      </Switch>\n      <ToastContainer position=\"top-right\" />\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","export default {\n    searchKey: '',\n    results:{}\n  };\n  ","import { combineReducers } from \"redux\";\nimport searchQueryReducer from \"./searchQueryReducer\";\nimport searchResultReducer from \"./searchResultReducer\";\n\nconst rootReducer = combineReducers({\n  searchKey: searchQueryReducer,\n  results: searchResultReducer,\n});\nexport default rootReducer;\n","import * as types from \"../actions/actionTypes\";\nimport initialState from \"./initialState\";\n\nexport default function searchQueryReducer(\n  state = initialState.searchKey,\n  action\n) {\n  switch (action.type) {\n    case types.CREATE_SEARCH:\n      return action.searchKey;\n    default:\n      return state;\n  }\n}\n","import * as types from \"../actions/actionTypes\";\nimport initialState from \"./initialState\";\n\nexport default function searchResultReducer(\n  state = initialState.results,\n  action\n) {\n  switch (action.type) {\n    case types.LOAD_RESULT_SUCCESS:\n      return action.results;\n    default:\n      return state;\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport {BrowserRouter as Router} from 'react-router-dom';\nimport \"./index.css\";\nimport \"react-toastify/dist/ReactToastify.css\";\nimport App from \"./components/App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport configureStore from \"./redux/reducers/configureStore\";\nimport { Provider as ReduxProvider } from \"react-redux\";\nimport CssBaseline from '@material-ui/core/CssBaseline';\n\nconst store = configureStore();\n\nReactDOM.render(\n  <ReduxProvider store={store}>\n   <CssBaseline />\n    <Router>\n      <App />\n    </Router>\n  </ReduxProvider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import { createStore, applyMiddleware, compose } from \"redux\";\nimport rootReducer from \"./index\";\nimport reduxImmutableStateInvariant from \"redux-immutable-state-invariant\";\nimport thunk from \"redux-thunk\";\n\nexport default function configureStore(initialState) {\n  const composeEnhancers =\n    (typeof window !== \"undefined\" &&\n      window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__) ||\n    compose;\n\n  return createStore(\n    rootReducer,\n    initialState,\n    composeEnhancers(applyMiddleware(thunk, reduxImmutableStateInvariant()))\n  );\n}\n"],"sourceRoot":""}